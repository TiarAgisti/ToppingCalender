'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8766
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("toppingcalender"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class toppingcalender
    Inherits Global.System.Data.DataSet
    
    Private tableScheduleDT As ScheduleDTDataTable
    
    Private tableProductionDT As ProductionDTDataTable
    
    Private tableScrapDT As ScrapDTDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ScheduleDT")) Is Nothing) Then
                MyBase.Tables.Add(New ScheduleDTDataTable(ds.Tables("ScheduleDT")))
            End If
            If (Not (ds.Tables("ProductionDT")) Is Nothing) Then
                MyBase.Tables.Add(New ProductionDTDataTable(ds.Tables("ProductionDT")))
            End If
            If (Not (ds.Tables("ScrapDT")) Is Nothing) Then
                MyBase.Tables.Add(New ScrapDTDataTable(ds.Tables("ScrapDT")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ScheduleDT() As ScheduleDTDataTable
        Get
            Return Me.tableScheduleDT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ProductionDT() As ProductionDTDataTable
        Get
            Return Me.tableProductionDT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ScrapDT() As ScrapDTDataTable
        Get
            Return Me.tableScrapDT
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As toppingcalender = CType(MyBase.Clone,toppingcalender)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("ScheduleDT")) Is Nothing) Then
                MyBase.Tables.Add(New ScheduleDTDataTable(ds.Tables("ScheduleDT")))
            End If
            If (Not (ds.Tables("ProductionDT")) Is Nothing) Then
                MyBase.Tables.Add(New ProductionDTDataTable(ds.Tables("ProductionDT")))
            End If
            If (Not (ds.Tables("ScrapDT")) Is Nothing) Then
                MyBase.Tables.Add(New ScrapDTDataTable(ds.Tables("ScrapDT")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableScheduleDT = CType(MyBase.Tables("ScheduleDT"),ScheduleDTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableScheduleDT) Is Nothing) Then
                Me.tableScheduleDT.InitVars
            End If
        End If
        Me.tableProductionDT = CType(MyBase.Tables("ProductionDT"),ProductionDTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProductionDT) Is Nothing) Then
                Me.tableProductionDT.InitVars
            End If
        End If
        Me.tableScrapDT = CType(MyBase.Tables("ScrapDT"),ScrapDTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableScrapDT) Is Nothing) Then
                Me.tableScrapDT.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "toppingcalender"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/toppingcalender.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableScheduleDT = New ScheduleDTDataTable
        MyBase.Tables.Add(Me.tableScheduleDT)
        Me.tableProductionDT = New ProductionDTDataTable
        MyBase.Tables.Add(Me.tableProductionDT)
        Me.tableScrapDT = New ScrapDTDataTable
        MyBase.Tables.Add(Me.tableScrapDT)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeScheduleDT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProductionDT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeScrapDT() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As toppingcalender = New toppingcalender
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub ScheduleDTRowChangeEventHandler(ByVal sender As Object, ByVal e As ScheduleDTRowChangeEvent)
    
    Public Delegate Sub ProductionDTRowChangeEventHandler(ByVal sender As Object, ByVal e As ProductionDTRowChangeEvent)
    
    Public Delegate Sub ScrapDTRowChangeEventHandler(ByVal sender As Object, ByVal e As ScrapDTRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ScheduleDTDataTable
        Inherits Global.System.Data.TypedTableBase(Of ScheduleDTRow)
        
        Private columnScheduleCode As Global.System.Data.DataColumn
        
        Private columnTreatmentCode As Global.System.Data.DataColumn
        
        Private columnConsDay As Global.System.Data.DataColumn
        
        Private columnMachineCode As Global.System.Data.DataColumn
        
        Private columnExpectedSpeed As Global.System.Data.DataColumn
        
        Private columnActualSpeedShift1 As Global.System.Data.DataColumn
        
        Private columnConsShift1 As Global.System.Data.DataColumn
        
        Private columnSCHRollShift1 As Global.System.Data.DataColumn
        
        Private columnrollshift1 As Global.System.Data.DataColumn
        
        Private columnmetershift1 As Global.System.Data.DataColumn
        
        Private columndescshift1 As Global.System.Data.DataColumn
        
        Private columnActualSpeedShift2 As Global.System.Data.DataColumn
        
        Private columnConsShift2 As Global.System.Data.DataColumn
        
        Private columnSCHRollShift2 As Global.System.Data.DataColumn
        
        Private columnrollshift2 As Global.System.Data.DataColumn
        
        Private columnmetershift2 As Global.System.Data.DataColumn
        
        Private columndescshift2 As Global.System.Data.DataColumn
        
        Private columnActualSpeedShift3 As Global.System.Data.DataColumn
        
        Private columnConsShift3 As Global.System.Data.DataColumn
        
        Private columnSCHRollShift3 As Global.System.Data.DataColumn
        
        Private columnrollshift3 As Global.System.Data.DataColumn
        
        Private columnmetershift3 As Global.System.Data.DataColumn
        
        Private columndescshift3 As Global.System.Data.DataColumn
        
        Private columnScheduleDate As Global.System.Data.DataColumn
        
        Private columnRevision As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ScheduleDT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ScheduleCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnScheduleCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TreatmentCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTreatmentCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConsDayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConsDay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MachineCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMachineCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExpectedSpeedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExpectedSpeed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ActualSpeedShift1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnActualSpeedShift1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConsShift1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnConsShift1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SCHRollShift1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSCHRollShift1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rollshift1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnrollshift1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property metershift1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmetershift1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descshift1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columndescshift1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ActualSpeedShift2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnActualSpeedShift2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConsShift2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnConsShift2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SCHRollShift2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSCHRollShift2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rollshift2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnrollshift2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property metershift2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmetershift2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descshift2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columndescshift2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ActualSpeedShift3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnActualSpeedShift3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConsShift3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnConsShift3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SCHRollShift3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSCHRollShift3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rollshift3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnrollshift3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property metershift3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmetershift3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descshift3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columndescshift3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ScheduleDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnScheduleDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RevisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRevision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ScheduleDTRow
            Get
                Return CType(Me.Rows(index),ScheduleDTRow)
            End Get
        End Property
        
        Public Event ScheduleDTRowChanging As ScheduleDTRowChangeEventHandler
        
        Public Event ScheduleDTRowChanged As ScheduleDTRowChangeEventHandler
        
        Public Event ScheduleDTRowDeleting As ScheduleDTRowChangeEventHandler
        
        Public Event ScheduleDTRowDeleted As ScheduleDTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddScheduleDTRow(ByVal row As ScheduleDTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddScheduleDTRow( _
                    ByVal ScheduleCode As String,  _
                    ByVal TreatmentCode As String,  _
                    ByVal ConsDay As String,  _
                    ByVal MachineCode As String,  _
                    ByVal ExpectedSpeed As String,  _
                    ByVal ActualSpeedShift1 As String,  _
                    ByVal ConsShift1 As String,  _
                    ByVal SCHRollShift1 As String,  _
                    ByVal rollshift1 As String,  _
                    ByVal metershift1 As String,  _
                    ByVal descshift1 As String,  _
                    ByVal ActualSpeedShift2 As String,  _
                    ByVal ConsShift2 As String,  _
                    ByVal SCHRollShift2 As String,  _
                    ByVal rollshift2 As String,  _
                    ByVal metershift2 As String,  _
                    ByVal descshift2 As String,  _
                    ByVal ActualSpeedShift3 As String,  _
                    ByVal ConsShift3 As String,  _
                    ByVal SCHRollShift3 As String,  _
                    ByVal rollshift3 As String,  _
                    ByVal metershift3 As String,  _
                    ByVal descshift3 As String,  _
                    ByVal ScheduleDate As String,  _
                    ByVal Revision As String) As ScheduleDTRow
            Dim rowScheduleDTRow As ScheduleDTRow = CType(Me.NewRow,ScheduleDTRow)
            Dim columnValuesArray() As Object = New Object() {ScheduleCode, TreatmentCode, ConsDay, MachineCode, ExpectedSpeed, ActualSpeedShift1, ConsShift1, SCHRollShift1, rollshift1, metershift1, descshift1, ActualSpeedShift2, ConsShift2, SCHRollShift2, rollshift2, metershift2, descshift2, ActualSpeedShift3, ConsShift3, SCHRollShift3, rollshift3, metershift3, descshift3, ScheduleDate, Revision}
            rowScheduleDTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowScheduleDTRow)
            Return rowScheduleDTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ScheduleDTDataTable = CType(MyBase.Clone,ScheduleDTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ScheduleDTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnScheduleCode = MyBase.Columns("ScheduleCode")
            Me.columnTreatmentCode = MyBase.Columns("TreatmentCode")
            Me.columnConsDay = MyBase.Columns("ConsDay")
            Me.columnMachineCode = MyBase.Columns("MachineCode")
            Me.columnExpectedSpeed = MyBase.Columns("ExpectedSpeed")
            Me.columnActualSpeedShift1 = MyBase.Columns("ActualSpeedShift1")
            Me.columnConsShift1 = MyBase.Columns("ConsShift1")
            Me.columnSCHRollShift1 = MyBase.Columns("SCHRollShift1")
            Me.columnrollshift1 = MyBase.Columns("rollshift1")
            Me.columnmetershift1 = MyBase.Columns("metershift1")
            Me.columndescshift1 = MyBase.Columns("descshift1")
            Me.columnActualSpeedShift2 = MyBase.Columns("ActualSpeedShift2")
            Me.columnConsShift2 = MyBase.Columns("ConsShift2")
            Me.columnSCHRollShift2 = MyBase.Columns("SCHRollShift2")
            Me.columnrollshift2 = MyBase.Columns("rollshift2")
            Me.columnmetershift2 = MyBase.Columns("metershift2")
            Me.columndescshift2 = MyBase.Columns("descshift2")
            Me.columnActualSpeedShift3 = MyBase.Columns("ActualSpeedShift3")
            Me.columnConsShift3 = MyBase.Columns("ConsShift3")
            Me.columnSCHRollShift3 = MyBase.Columns("SCHRollShift3")
            Me.columnrollshift3 = MyBase.Columns("rollshift3")
            Me.columnmetershift3 = MyBase.Columns("metershift3")
            Me.columndescshift3 = MyBase.Columns("descshift3")
            Me.columnScheduleDate = MyBase.Columns("ScheduleDate")
            Me.columnRevision = MyBase.Columns("Revision")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnScheduleCode = New Global.System.Data.DataColumn("ScheduleCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnScheduleCode)
            Me.columnTreatmentCode = New Global.System.Data.DataColumn("TreatmentCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTreatmentCode)
            Me.columnConsDay = New Global.System.Data.DataColumn("ConsDay", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConsDay)
            Me.columnMachineCode = New Global.System.Data.DataColumn("MachineCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMachineCode)
            Me.columnExpectedSpeed = New Global.System.Data.DataColumn("ExpectedSpeed", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExpectedSpeed)
            Me.columnActualSpeedShift1 = New Global.System.Data.DataColumn("ActualSpeedShift1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnActualSpeedShift1)
            Me.columnConsShift1 = New Global.System.Data.DataColumn("ConsShift1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConsShift1)
            Me.columnSCHRollShift1 = New Global.System.Data.DataColumn("SCHRollShift1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSCHRollShift1)
            Me.columnrollshift1 = New Global.System.Data.DataColumn("rollshift1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrollshift1)
            Me.columnmetershift1 = New Global.System.Data.DataColumn("metershift1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmetershift1)
            Me.columndescshift1 = New Global.System.Data.DataColumn("descshift1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescshift1)
            Me.columnActualSpeedShift2 = New Global.System.Data.DataColumn("ActualSpeedShift2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnActualSpeedShift2)
            Me.columnConsShift2 = New Global.System.Data.DataColumn("ConsShift2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConsShift2)
            Me.columnSCHRollShift2 = New Global.System.Data.DataColumn("SCHRollShift2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSCHRollShift2)
            Me.columnrollshift2 = New Global.System.Data.DataColumn("rollshift2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrollshift2)
            Me.columnmetershift2 = New Global.System.Data.DataColumn("metershift2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmetershift2)
            Me.columndescshift2 = New Global.System.Data.DataColumn("descshift2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescshift2)
            Me.columnActualSpeedShift3 = New Global.System.Data.DataColumn("ActualSpeedShift3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnActualSpeedShift3)
            Me.columnConsShift3 = New Global.System.Data.DataColumn("ConsShift3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConsShift3)
            Me.columnSCHRollShift3 = New Global.System.Data.DataColumn("SCHRollShift3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSCHRollShift3)
            Me.columnrollshift3 = New Global.System.Data.DataColumn("rollshift3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrollshift3)
            Me.columnmetershift3 = New Global.System.Data.DataColumn("metershift3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmetershift3)
            Me.columndescshift3 = New Global.System.Data.DataColumn("descshift3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescshift3)
            Me.columnScheduleDate = New Global.System.Data.DataColumn("ScheduleDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnScheduleDate)
            Me.columnRevision = New Global.System.Data.DataColumn("Revision", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRevision)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewScheduleDTRow() As ScheduleDTRow
            Return CType(Me.NewRow,ScheduleDTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ScheduleDTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ScheduleDTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ScheduleDTRowChangedEvent) Is Nothing) Then
                RaiseEvent ScheduleDTRowChanged(Me, New ScheduleDTRowChangeEvent(CType(e.Row,ScheduleDTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ScheduleDTRowChangingEvent) Is Nothing) Then
                RaiseEvent ScheduleDTRowChanging(Me, New ScheduleDTRowChangeEvent(CType(e.Row,ScheduleDTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ScheduleDTRowDeletedEvent) Is Nothing) Then
                RaiseEvent ScheduleDTRowDeleted(Me, New ScheduleDTRowChangeEvent(CType(e.Row,ScheduleDTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ScheduleDTRowDeletingEvent) Is Nothing) Then
                RaiseEvent ScheduleDTRowDeleting(Me, New ScheduleDTRowChangeEvent(CType(e.Row,ScheduleDTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveScheduleDTRow(ByVal row As ScheduleDTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As toppingcalender = New toppingcalender
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ScheduleDTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ProductionDTDataTable
        Inherits Global.System.Data.TypedTableBase(Of ProductionDTRow)
        
        Private columnProductionCode As Global.System.Data.DataColumn
        
        Private columnProductionDate As Global.System.Data.DataColumn
        
        Private columnExpDate As Global.System.Data.DataColumn
        
        Private columnScheduleCode As Global.System.Data.DataColumn
        
        Private columnshift As Global.System.Data.DataColumn
        
        Private columnNoRoll As Global.System.Data.DataColumn
        
        Private columnTreatmentCode As Global.System.Data.DataColumn
        
        Private columnNumberSpec As Global.System.Data.DataColumn
        
        Private columnsupplier As Global.System.Data.DataColumn
        
        Private columnNylonCode As Global.System.Data.DataColumn
        
        Private columnDateInNylon As Global.System.Data.DataColumn
        
        Private columnCompountCode As Global.System.Data.DataColumn
        
        Private columnSign As Global.System.Data.DataColumn
        
        Private columnActual As Global.System.Data.DataColumn
        
        Private columnQtyMeter As Global.System.Data.DataColumn
        
        Private columnInformation As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ProductionDT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductionCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProductionCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductionDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProductionDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExpDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExpDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ScheduleCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnScheduleCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property shiftColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnshift
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoRollColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoRoll
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TreatmentCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTreatmentCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumberSpecColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumberSpec
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property supplierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsupplier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NylonCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNylonCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateInNylonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateInNylon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompountCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompountCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SignColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSign
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ActualColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnActual
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QtyMeterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQtyMeter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InformationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInformation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProductionDTRow
            Get
                Return CType(Me.Rows(index),ProductionDTRow)
            End Get
        End Property
        
        Public Event ProductionDTRowChanging As ProductionDTRowChangeEventHandler
        
        Public Event ProductionDTRowChanged As ProductionDTRowChangeEventHandler
        
        Public Event ProductionDTRowDeleting As ProductionDTRowChangeEventHandler
        
        Public Event ProductionDTRowDeleted As ProductionDTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProductionDTRow(ByVal row As ProductionDTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProductionDTRow( _
                    ByVal ProductionCode As String,  _
                    ByVal ProductionDate As String,  _
                    ByVal ExpDate As String,  _
                    ByVal ScheduleCode As String,  _
                    ByVal shift As String,  _
                    ByVal NoRoll As String,  _
                    ByVal TreatmentCode As String,  _
                    ByVal NumberSpec As String,  _
                    ByVal supplier As String,  _
                    ByVal NylonCode As String,  _
                    ByVal DateInNylon As String,  _
                    ByVal CompountCode As String,  _
                    ByVal Sign As String,  _
                    ByVal Actual As String,  _
                    ByVal QtyMeter As String,  _
                    ByVal Information As String) As ProductionDTRow
            Dim rowProductionDTRow As ProductionDTRow = CType(Me.NewRow,ProductionDTRow)
            Dim columnValuesArray() As Object = New Object() {ProductionCode, ProductionDate, ExpDate, ScheduleCode, shift, NoRoll, TreatmentCode, NumberSpec, supplier, NylonCode, DateInNylon, CompountCode, Sign, Actual, QtyMeter, Information}
            rowProductionDTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowProductionDTRow)
            Return rowProductionDTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ProductionDTDataTable = CType(MyBase.Clone,ProductionDTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ProductionDTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnProductionCode = MyBase.Columns("ProductionCode")
            Me.columnProductionDate = MyBase.Columns("ProductionDate")
            Me.columnExpDate = MyBase.Columns("ExpDate")
            Me.columnScheduleCode = MyBase.Columns("ScheduleCode")
            Me.columnshift = MyBase.Columns("shift")
            Me.columnNoRoll = MyBase.Columns("NoRoll")
            Me.columnTreatmentCode = MyBase.Columns("TreatmentCode")
            Me.columnNumberSpec = MyBase.Columns("NumberSpec")
            Me.columnsupplier = MyBase.Columns("supplier")
            Me.columnNylonCode = MyBase.Columns("NylonCode")
            Me.columnDateInNylon = MyBase.Columns("DateInNylon")
            Me.columnCompountCode = MyBase.Columns("CompountCode")
            Me.columnSign = MyBase.Columns("Sign")
            Me.columnActual = MyBase.Columns("Actual")
            Me.columnQtyMeter = MyBase.Columns("QtyMeter")
            Me.columnInformation = MyBase.Columns("Information")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnProductionCode = New Global.System.Data.DataColumn("ProductionCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductionCode)
            Me.columnProductionDate = New Global.System.Data.DataColumn("ProductionDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductionDate)
            Me.columnExpDate = New Global.System.Data.DataColumn("ExpDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExpDate)
            Me.columnScheduleCode = New Global.System.Data.DataColumn("ScheduleCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnScheduleCode)
            Me.columnshift = New Global.System.Data.DataColumn("shift", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnshift)
            Me.columnNoRoll = New Global.System.Data.DataColumn("NoRoll", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoRoll)
            Me.columnTreatmentCode = New Global.System.Data.DataColumn("TreatmentCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTreatmentCode)
            Me.columnNumberSpec = New Global.System.Data.DataColumn("NumberSpec", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumberSpec)
            Me.columnsupplier = New Global.System.Data.DataColumn("supplier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsupplier)
            Me.columnNylonCode = New Global.System.Data.DataColumn("NylonCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNylonCode)
            Me.columnDateInNylon = New Global.System.Data.DataColumn("DateInNylon", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateInNylon)
            Me.columnCompountCode = New Global.System.Data.DataColumn("CompountCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompountCode)
            Me.columnSign = New Global.System.Data.DataColumn("Sign", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSign)
            Me.columnActual = New Global.System.Data.DataColumn("Actual", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnActual)
            Me.columnQtyMeter = New Global.System.Data.DataColumn("QtyMeter", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQtyMeter)
            Me.columnInformation = New Global.System.Data.DataColumn("Information", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInformation)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProductionDTRow() As ProductionDTRow
            Return CType(Me.NewRow,ProductionDTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ProductionDTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ProductionDTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProductionDTRowChangedEvent) Is Nothing) Then
                RaiseEvent ProductionDTRowChanged(Me, New ProductionDTRowChangeEvent(CType(e.Row,ProductionDTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProductionDTRowChangingEvent) Is Nothing) Then
                RaiseEvent ProductionDTRowChanging(Me, New ProductionDTRowChangeEvent(CType(e.Row,ProductionDTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProductionDTRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProductionDTRowDeleted(Me, New ProductionDTRowChangeEvent(CType(e.Row,ProductionDTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProductionDTRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProductionDTRowDeleting(Me, New ProductionDTRowChangeEvent(CType(e.Row,ProductionDTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProductionDTRow(ByVal row As ProductionDTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As toppingcalender = New toppingcalender
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ProductionDTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ScrapDTDataTable
        Inherits Global.System.Data.TypedTableBase(Of ScrapDTRow)
        
        Private columnScrapCode As Global.System.Data.DataColumn
        
        Private columnTreatmentCode As Global.System.Data.DataColumn
        
        Private columnNoRoll As Global.System.Data.DataColumn
        
        Private columnSPL As Global.System.Data.DataColumn
        
        Private columnST As Global.System.Data.DataColumn
        
        Private columnMP As Global.System.Data.DataColumn
        
        Private columnBT As Global.System.Data.DataColumn
        
        Private columnOC As Global.System.Data.DataColumn
        
        Private columnSG As Global.System.Data.DataColumn
        
        Private columnSC As Global.System.Data.DataColumn
        
        Private columnLR As Global.System.Data.DataColumn
        
        Private columnKP As Global.System.Data.DataColumn
        
        Private columnLL As Global.System.Data.DataColumn
        
        Private columnTTL As Global.System.Data.DataColumn
        
        Private columnProdMeter As Global.System.Data.DataColumn
        
        Private columnNumberLiner As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnScrapDate As Global.System.Data.DataColumn
        
        Private columnmachineCode As Global.System.Data.DataColumn
        
        Private columnshift As Global.System.Data.DataColumn
        
        Private columnproductioncode As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ScrapDT"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ScrapCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnScrapCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TreatmentCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTreatmentCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoRollColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoRoll
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SPLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSPL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property STColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property KPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TTLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTTL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProdMeterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProdMeter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumberLinerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumberLiner
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ScrapDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnScrapDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property machineCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmachineCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property shiftColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnshift
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property productioncodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproductioncode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ScrapDTRow
            Get
                Return CType(Me.Rows(index),ScrapDTRow)
            End Get
        End Property
        
        Public Event ScrapDTRowChanging As ScrapDTRowChangeEventHandler
        
        Public Event ScrapDTRowChanged As ScrapDTRowChangeEventHandler
        
        Public Event ScrapDTRowDeleting As ScrapDTRowChangeEventHandler
        
        Public Event ScrapDTRowDeleted As ScrapDTRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddScrapDTRow(ByVal row As ScrapDTRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddScrapDTRow( _
                    ByVal ScrapCode As String,  _
                    ByVal TreatmentCode As String,  _
                    ByVal NoRoll As String,  _
                    ByVal SPL As String,  _
                    ByVal ST As String,  _
                    ByVal MP As String,  _
                    ByVal BT As String,  _
                    ByVal OC As String,  _
                    ByVal SG As String,  _
                    ByVal SC As String,  _
                    ByVal LR As String,  _
                    ByVal KP As String,  _
                    ByVal LL As String,  _
                    ByVal TTL As String,  _
                    ByVal ProdMeter As String,  _
                    ByVal NumberLiner As String,  _
                    ByVal Description As String,  _
                    ByVal ScrapDate As String,  _
                    ByVal machineCode As String,  _
                    ByVal shift As String,  _
                    ByVal productioncode As String) As ScrapDTRow
            Dim rowScrapDTRow As ScrapDTRow = CType(Me.NewRow,ScrapDTRow)
            Dim columnValuesArray() As Object = New Object() {ScrapCode, TreatmentCode, NoRoll, SPL, ST, MP, BT, OC, SG, SC, LR, KP, LL, TTL, ProdMeter, NumberLiner, Description, ScrapDate, machineCode, shift, productioncode}
            rowScrapDTRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowScrapDTRow)
            Return rowScrapDTRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ScrapDTDataTable = CType(MyBase.Clone,ScrapDTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ScrapDTDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnScrapCode = MyBase.Columns("ScrapCode")
            Me.columnTreatmentCode = MyBase.Columns("TreatmentCode")
            Me.columnNoRoll = MyBase.Columns("NoRoll")
            Me.columnSPL = MyBase.Columns("SPL")
            Me.columnST = MyBase.Columns("ST")
            Me.columnMP = MyBase.Columns("MP")
            Me.columnBT = MyBase.Columns("BT")
            Me.columnOC = MyBase.Columns("OC")
            Me.columnSG = MyBase.Columns("SG")
            Me.columnSC = MyBase.Columns("SC")
            Me.columnLR = MyBase.Columns("LR")
            Me.columnKP = MyBase.Columns("KP")
            Me.columnLL = MyBase.Columns("LL")
            Me.columnTTL = MyBase.Columns("TTL")
            Me.columnProdMeter = MyBase.Columns("ProdMeter")
            Me.columnNumberLiner = MyBase.Columns("NumberLiner")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnScrapDate = MyBase.Columns("ScrapDate")
            Me.columnmachineCode = MyBase.Columns("machineCode")
            Me.columnshift = MyBase.Columns("shift")
            Me.columnproductioncode = MyBase.Columns("productioncode")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnScrapCode = New Global.System.Data.DataColumn("ScrapCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnScrapCode)
            Me.columnTreatmentCode = New Global.System.Data.DataColumn("TreatmentCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTreatmentCode)
            Me.columnNoRoll = New Global.System.Data.DataColumn("NoRoll", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoRoll)
            Me.columnSPL = New Global.System.Data.DataColumn("SPL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSPL)
            Me.columnST = New Global.System.Data.DataColumn("ST", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnST)
            Me.columnMP = New Global.System.Data.DataColumn("MP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMP)
            Me.columnBT = New Global.System.Data.DataColumn("BT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBT)
            Me.columnOC = New Global.System.Data.DataColumn("OC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOC)
            Me.columnSG = New Global.System.Data.DataColumn("SG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSG)
            Me.columnSC = New Global.System.Data.DataColumn("SC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSC)
            Me.columnLR = New Global.System.Data.DataColumn("LR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLR)
            Me.columnKP = New Global.System.Data.DataColumn("KP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKP)
            Me.columnLL = New Global.System.Data.DataColumn("LL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLL)
            Me.columnTTL = New Global.System.Data.DataColumn("TTL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTTL)
            Me.columnProdMeter = New Global.System.Data.DataColumn("ProdMeter", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProdMeter)
            Me.columnNumberLiner = New Global.System.Data.DataColumn("NumberLiner", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumberLiner)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnScrapDate = New Global.System.Data.DataColumn("ScrapDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnScrapDate)
            Me.columnmachineCode = New Global.System.Data.DataColumn("machineCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmachineCode)
            Me.columnshift = New Global.System.Data.DataColumn("shift", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnshift)
            Me.columnproductioncode = New Global.System.Data.DataColumn("productioncode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproductioncode)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewScrapDTRow() As ScrapDTRow
            Return CType(Me.NewRow,ScrapDTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ScrapDTRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ScrapDTRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ScrapDTRowChangedEvent) Is Nothing) Then
                RaiseEvent ScrapDTRowChanged(Me, New ScrapDTRowChangeEvent(CType(e.Row,ScrapDTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ScrapDTRowChangingEvent) Is Nothing) Then
                RaiseEvent ScrapDTRowChanging(Me, New ScrapDTRowChangeEvent(CType(e.Row,ScrapDTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ScrapDTRowDeletedEvent) Is Nothing) Then
                RaiseEvent ScrapDTRowDeleted(Me, New ScrapDTRowChangeEvent(CType(e.Row,ScrapDTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ScrapDTRowDeletingEvent) Is Nothing) Then
                RaiseEvent ScrapDTRowDeleting(Me, New ScrapDTRowChangeEvent(CType(e.Row,ScrapDTRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveScrapDTRow(ByVal row As ScrapDTRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As toppingcalender = New toppingcalender
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ScrapDTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ScheduleDTRow
        Inherits Global.System.Data.DataRow
        
        Private tableScheduleDT As ScheduleDTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableScheduleDT = CType(Me.Table,ScheduleDTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ScheduleCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableScheduleDT.ScheduleCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ScheduleCode' in table 'ScheduleDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScheduleDT.ScheduleCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TreatmentCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableScheduleDT.TreatmentCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TreatmentCode' in table 'ScheduleDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScheduleDT.TreatmentCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConsDay() As String
            Get
                Try 
                    Return CType(Me(Me.tableScheduleDT.ConsDayColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ConsDay' in table 'ScheduleDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScheduleDT.ConsDayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MachineCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableScheduleDT.MachineCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MachineCode' in table 'ScheduleDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScheduleDT.MachineCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExpectedSpeed() As String
            Get
                Try 
                    Return CType(Me(Me.tableScheduleDT.ExpectedSpeedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ExpectedSpeed' in table 'ScheduleDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScheduleDT.ExpectedSpeedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ActualSpeedShift1() As String
            Get
                Try 
                    Return CType(Me(Me.tableScheduleDT.ActualSpeedShift1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ActualSpeedShift1' in table 'ScheduleDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScheduleDT.ActualSpeedShift1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConsShift1() As String
            Get
                Try 
                    Return CType(Me(Me.tableScheduleDT.ConsShift1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ConsShift1' in table 'ScheduleDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScheduleDT.ConsShift1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SCHRollShift1() As String
            Get
                Try 
                    Return CType(Me(Me.tableScheduleDT.SCHRollShift1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SCHRollShift1' in table 'ScheduleDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScheduleDT.SCHRollShift1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rollshift1() As String
            Get
                Try 
                    Return CType(Me(Me.tableScheduleDT.rollshift1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'rollshift1' in table 'ScheduleDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScheduleDT.rollshift1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property metershift1() As String
            Get
                Try 
                    Return CType(Me(Me.tableScheduleDT.metershift1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'metershift1' in table 'ScheduleDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScheduleDT.metershift1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property descshift1() As String
            Get
                Try 
                    Return CType(Me(Me.tableScheduleDT.descshift1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'descshift1' in table 'ScheduleDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScheduleDT.descshift1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ActualSpeedShift2() As String
            Get
                Try 
                    Return CType(Me(Me.tableScheduleDT.ActualSpeedShift2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ActualSpeedShift2' in table 'ScheduleDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScheduleDT.ActualSpeedShift2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConsShift2() As String
            Get
                Try 
                    Return CType(Me(Me.tableScheduleDT.ConsShift2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ConsShift2' in table 'ScheduleDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScheduleDT.ConsShift2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SCHRollShift2() As String
            Get
                Try 
                    Return CType(Me(Me.tableScheduleDT.SCHRollShift2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SCHRollShift2' in table 'ScheduleDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScheduleDT.SCHRollShift2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rollshift2() As String
            Get
                Try 
                    Return CType(Me(Me.tableScheduleDT.rollshift2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'rollshift2' in table 'ScheduleDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScheduleDT.rollshift2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property metershift2() As String
            Get
                Try 
                    Return CType(Me(Me.tableScheduleDT.metershift2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'metershift2' in table 'ScheduleDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScheduleDT.metershift2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property descshift2() As String
            Get
                Try 
                    Return CType(Me(Me.tableScheduleDT.descshift2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'descshift2' in table 'ScheduleDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScheduleDT.descshift2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ActualSpeedShift3() As String
            Get
                Try 
                    Return CType(Me(Me.tableScheduleDT.ActualSpeedShift3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ActualSpeedShift3' in table 'ScheduleDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScheduleDT.ActualSpeedShift3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConsShift3() As String
            Get
                Try 
                    Return CType(Me(Me.tableScheduleDT.ConsShift3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ConsShift3' in table 'ScheduleDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScheduleDT.ConsShift3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SCHRollShift3() As String
            Get
                Try 
                    Return CType(Me(Me.tableScheduleDT.SCHRollShift3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SCHRollShift3' in table 'ScheduleDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScheduleDT.SCHRollShift3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rollshift3() As String
            Get
                Try 
                    Return CType(Me(Me.tableScheduleDT.rollshift3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'rollshift3' in table 'ScheduleDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScheduleDT.rollshift3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property metershift3() As String
            Get
                Try 
                    Return CType(Me(Me.tableScheduleDT.metershift3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'metershift3' in table 'ScheduleDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScheduleDT.metershift3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property descshift3() As String
            Get
                Try 
                    Return CType(Me(Me.tableScheduleDT.descshift3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'descshift3' in table 'ScheduleDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScheduleDT.descshift3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ScheduleDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableScheduleDT.ScheduleDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ScheduleDate' in table 'ScheduleDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScheduleDT.ScheduleDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Revision() As String
            Get
                Try 
                    Return CType(Me(Me.tableScheduleDT.RevisionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Revision' in table 'ScheduleDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScheduleDT.RevisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsScheduleCodeNull() As Boolean
            Return Me.IsNull(Me.tableScheduleDT.ScheduleCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetScheduleCodeNull()
            Me(Me.tableScheduleDT.ScheduleCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTreatmentCodeNull() As Boolean
            Return Me.IsNull(Me.tableScheduleDT.TreatmentCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTreatmentCodeNull()
            Me(Me.tableScheduleDT.TreatmentCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConsDayNull() As Boolean
            Return Me.IsNull(Me.tableScheduleDT.ConsDayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConsDayNull()
            Me(Me.tableScheduleDT.ConsDayColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMachineCodeNull() As Boolean
            Return Me.IsNull(Me.tableScheduleDT.MachineCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMachineCodeNull()
            Me(Me.tableScheduleDT.MachineCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExpectedSpeedNull() As Boolean
            Return Me.IsNull(Me.tableScheduleDT.ExpectedSpeedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExpectedSpeedNull()
            Me(Me.tableScheduleDT.ExpectedSpeedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsActualSpeedShift1Null() As Boolean
            Return Me.IsNull(Me.tableScheduleDT.ActualSpeedShift1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetActualSpeedShift1Null()
            Me(Me.tableScheduleDT.ActualSpeedShift1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConsShift1Null() As Boolean
            Return Me.IsNull(Me.tableScheduleDT.ConsShift1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConsShift1Null()
            Me(Me.tableScheduleDT.ConsShift1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSCHRollShift1Null() As Boolean
            Return Me.IsNull(Me.tableScheduleDT.SCHRollShift1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSCHRollShift1Null()
            Me(Me.tableScheduleDT.SCHRollShift1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isrollshift1Null() As Boolean
            Return Me.IsNull(Me.tableScheduleDT.rollshift1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setrollshift1Null()
            Me(Me.tableScheduleDT.rollshift1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ismetershift1Null() As Boolean
            Return Me.IsNull(Me.tableScheduleDT.metershift1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setmetershift1Null()
            Me(Me.tableScheduleDT.metershift1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdescshift1Null() As Boolean
            Return Me.IsNull(Me.tableScheduleDT.descshift1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdescshift1Null()
            Me(Me.tableScheduleDT.descshift1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsActualSpeedShift2Null() As Boolean
            Return Me.IsNull(Me.tableScheduleDT.ActualSpeedShift2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetActualSpeedShift2Null()
            Me(Me.tableScheduleDT.ActualSpeedShift2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConsShift2Null() As Boolean
            Return Me.IsNull(Me.tableScheduleDT.ConsShift2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConsShift2Null()
            Me(Me.tableScheduleDT.ConsShift2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSCHRollShift2Null() As Boolean
            Return Me.IsNull(Me.tableScheduleDT.SCHRollShift2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSCHRollShift2Null()
            Me(Me.tableScheduleDT.SCHRollShift2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isrollshift2Null() As Boolean
            Return Me.IsNull(Me.tableScheduleDT.rollshift2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setrollshift2Null()
            Me(Me.tableScheduleDT.rollshift2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ismetershift2Null() As Boolean
            Return Me.IsNull(Me.tableScheduleDT.metershift2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setmetershift2Null()
            Me(Me.tableScheduleDT.metershift2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdescshift2Null() As Boolean
            Return Me.IsNull(Me.tableScheduleDT.descshift2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdescshift2Null()
            Me(Me.tableScheduleDT.descshift2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsActualSpeedShift3Null() As Boolean
            Return Me.IsNull(Me.tableScheduleDT.ActualSpeedShift3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetActualSpeedShift3Null()
            Me(Me.tableScheduleDT.ActualSpeedShift3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConsShift3Null() As Boolean
            Return Me.IsNull(Me.tableScheduleDT.ConsShift3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConsShift3Null()
            Me(Me.tableScheduleDT.ConsShift3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSCHRollShift3Null() As Boolean
            Return Me.IsNull(Me.tableScheduleDT.SCHRollShift3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSCHRollShift3Null()
            Me(Me.tableScheduleDT.SCHRollShift3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isrollshift3Null() As Boolean
            Return Me.IsNull(Me.tableScheduleDT.rollshift3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setrollshift3Null()
            Me(Me.tableScheduleDT.rollshift3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Ismetershift3Null() As Boolean
            Return Me.IsNull(Me.tableScheduleDT.metershift3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setmetershift3Null()
            Me(Me.tableScheduleDT.metershift3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isdescshift3Null() As Boolean
            Return Me.IsNull(Me.tableScheduleDT.descshift3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setdescshift3Null()
            Me(Me.tableScheduleDT.descshift3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsScheduleDateNull() As Boolean
            Return Me.IsNull(Me.tableScheduleDT.ScheduleDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetScheduleDateNull()
            Me(Me.tableScheduleDT.ScheduleDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRevisionNull() As Boolean
            Return Me.IsNull(Me.tableScheduleDT.RevisionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRevisionNull()
            Me(Me.tableScheduleDT.RevisionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ProductionDTRow
        Inherits Global.System.Data.DataRow
        
        Private tableProductionDT As ProductionDTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProductionDT = CType(Me.Table,ProductionDTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProductionCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableProductionDT.ProductionCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProductionCode' in table 'ProductionDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductionDT.ProductionCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProductionDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableProductionDT.ProductionDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProductionDate' in table 'ProductionDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductionDT.ProductionDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExpDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableProductionDT.ExpDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ExpDate' in table 'ProductionDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductionDT.ExpDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ScheduleCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableProductionDT.ScheduleCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ScheduleCode' in table 'ProductionDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductionDT.ScheduleCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property shift() As String
            Get
                Try 
                    Return CType(Me(Me.tableProductionDT.shiftColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'shift' in table 'ProductionDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductionDT.shiftColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoRoll() As String
            Get
                Try 
                    Return CType(Me(Me.tableProductionDT.NoRollColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NoRoll' in table 'ProductionDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductionDT.NoRollColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TreatmentCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableProductionDT.TreatmentCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TreatmentCode' in table 'ProductionDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductionDT.TreatmentCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumberSpec() As String
            Get
                Try 
                    Return CType(Me(Me.tableProductionDT.NumberSpecColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumberSpec' in table 'ProductionDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductionDT.NumberSpecColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property supplier() As String
            Get
                Try 
                    Return CType(Me(Me.tableProductionDT.supplierColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'supplier' in table 'ProductionDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductionDT.supplierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NylonCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableProductionDT.NylonCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NylonCode' in table 'ProductionDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductionDT.NylonCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateInNylon() As String
            Get
                Try 
                    Return CType(Me(Me.tableProductionDT.DateInNylonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateInNylon' in table 'ProductionDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductionDT.DateInNylonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompountCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableProductionDT.CompountCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CompountCode' in table 'ProductionDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductionDT.CompountCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sign() As String
            Get
                Try 
                    Return CType(Me(Me.tableProductionDT.SignColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sign' in table 'ProductionDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductionDT.SignColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Actual() As String
            Get
                Try 
                    Return CType(Me(Me.tableProductionDT.ActualColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Actual' in table 'ProductionDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductionDT.ActualColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QtyMeter() As String
            Get
                Try 
                    Return CType(Me(Me.tableProductionDT.QtyMeterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QtyMeter' in table 'ProductionDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductionDT.QtyMeterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Information() As String
            Get
                Try 
                    Return CType(Me(Me.tableProductionDT.InformationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Information' in table 'ProductionDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProductionDT.InformationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProductionCodeNull() As Boolean
            Return Me.IsNull(Me.tableProductionDT.ProductionCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProductionCodeNull()
            Me(Me.tableProductionDT.ProductionCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProductionDateNull() As Boolean
            Return Me.IsNull(Me.tableProductionDT.ProductionDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProductionDateNull()
            Me(Me.tableProductionDT.ProductionDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExpDateNull() As Boolean
            Return Me.IsNull(Me.tableProductionDT.ExpDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExpDateNull()
            Me(Me.tableProductionDT.ExpDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsScheduleCodeNull() As Boolean
            Return Me.IsNull(Me.tableProductionDT.ScheduleCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetScheduleCodeNull()
            Me(Me.tableProductionDT.ScheduleCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsshiftNull() As Boolean
            Return Me.IsNull(Me.tableProductionDT.shiftColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetshiftNull()
            Me(Me.tableProductionDT.shiftColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNoRollNull() As Boolean
            Return Me.IsNull(Me.tableProductionDT.NoRollColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNoRollNull()
            Me(Me.tableProductionDT.NoRollColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTreatmentCodeNull() As Boolean
            Return Me.IsNull(Me.tableProductionDT.TreatmentCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTreatmentCodeNull()
            Me(Me.tableProductionDT.TreatmentCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumberSpecNull() As Boolean
            Return Me.IsNull(Me.tableProductionDT.NumberSpecColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumberSpecNull()
            Me(Me.tableProductionDT.NumberSpecColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssupplierNull() As Boolean
            Return Me.IsNull(Me.tableProductionDT.supplierColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsupplierNull()
            Me(Me.tableProductionDT.supplierColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNylonCodeNull() As Boolean
            Return Me.IsNull(Me.tableProductionDT.NylonCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNylonCodeNull()
            Me(Me.tableProductionDT.NylonCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateInNylonNull() As Boolean
            Return Me.IsNull(Me.tableProductionDT.DateInNylonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateInNylonNull()
            Me(Me.tableProductionDT.DateInNylonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompountCodeNull() As Boolean
            Return Me.IsNull(Me.tableProductionDT.CompountCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompountCodeNull()
            Me(Me.tableProductionDT.CompountCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSignNull() As Boolean
            Return Me.IsNull(Me.tableProductionDT.SignColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSignNull()
            Me(Me.tableProductionDT.SignColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsActualNull() As Boolean
            Return Me.IsNull(Me.tableProductionDT.ActualColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetActualNull()
            Me(Me.tableProductionDT.ActualColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQtyMeterNull() As Boolean
            Return Me.IsNull(Me.tableProductionDT.QtyMeterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQtyMeterNull()
            Me(Me.tableProductionDT.QtyMeterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInformationNull() As Boolean
            Return Me.IsNull(Me.tableProductionDT.InformationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInformationNull()
            Me(Me.tableProductionDT.InformationColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ScrapDTRow
        Inherits Global.System.Data.DataRow
        
        Private tableScrapDT As ScrapDTDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableScrapDT = CType(Me.Table,ScrapDTDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ScrapCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableScrapDT.ScrapCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ScrapCode' in table 'ScrapDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScrapDT.ScrapCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TreatmentCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableScrapDT.TreatmentCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TreatmentCode' in table 'ScrapDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScrapDT.TreatmentCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoRoll() As String
            Get
                Try 
                    Return CType(Me(Me.tableScrapDT.NoRollColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NoRoll' in table 'ScrapDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScrapDT.NoRollColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPL() As String
            Get
                Try 
                    Return CType(Me(Me.tableScrapDT.SPLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SPL' in table 'ScrapDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScrapDT.SPLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ST() As String
            Get
                Try 
                    Return CType(Me(Me.tableScrapDT.STColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ST' in table 'ScrapDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScrapDT.STColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MP() As String
            Get
                Try 
                    Return CType(Me(Me.tableScrapDT.MPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MP' in table 'ScrapDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScrapDT.MPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BT() As String
            Get
                Try 
                    Return CType(Me(Me.tableScrapDT.BTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BT' in table 'ScrapDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScrapDT.BTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OC() As String
            Get
                Try 
                    Return CType(Me(Me.tableScrapDT.OCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OC' in table 'ScrapDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScrapDT.OCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SG() As String
            Get
                Try 
                    Return CType(Me(Me.tableScrapDT.SGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SG' in table 'ScrapDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScrapDT.SGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SC() As String
            Get
                Try 
                    Return CType(Me(Me.tableScrapDT.SCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SC' in table 'ScrapDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScrapDT.SCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LR() As String
            Get
                Try 
                    Return CType(Me(Me.tableScrapDT.LRColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LR' in table 'ScrapDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScrapDT.LRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property KP() As String
            Get
                Try 
                    Return CType(Me(Me.tableScrapDT.KPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KP' in table 'ScrapDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScrapDT.KPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LL() As String
            Get
                Try 
                    Return CType(Me(Me.tableScrapDT.LLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LL' in table 'ScrapDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScrapDT.LLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TTL() As String
            Get
                Try 
                    Return CType(Me(Me.tableScrapDT.TTLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TTL' in table 'ScrapDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScrapDT.TTLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProdMeter() As String
            Get
                Try 
                    Return CType(Me(Me.tableScrapDT.ProdMeterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProdMeter' in table 'ScrapDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScrapDT.ProdMeterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumberLiner() As String
            Get
                Try 
                    Return CType(Me(Me.tableScrapDT.NumberLinerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumberLiner' in table 'ScrapDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScrapDT.NumberLinerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableScrapDT.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'ScrapDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScrapDT.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ScrapDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableScrapDT.ScrapDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ScrapDate' in table 'ScrapDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScrapDT.ScrapDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property machineCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableScrapDT.machineCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'machineCode' in table 'ScrapDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScrapDT.machineCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property shift() As String
            Get
                Try 
                    Return CType(Me(Me.tableScrapDT.shiftColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'shift' in table 'ScrapDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScrapDT.shiftColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property productioncode() As String
            Get
                Try 
                    Return CType(Me(Me.tableScrapDT.productioncodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'productioncode' in table 'ScrapDT' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableScrapDT.productioncodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsScrapCodeNull() As Boolean
            Return Me.IsNull(Me.tableScrapDT.ScrapCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetScrapCodeNull()
            Me(Me.tableScrapDT.ScrapCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTreatmentCodeNull() As Boolean
            Return Me.IsNull(Me.tableScrapDT.TreatmentCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTreatmentCodeNull()
            Me(Me.tableScrapDT.TreatmentCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNoRollNull() As Boolean
            Return Me.IsNull(Me.tableScrapDT.NoRollColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNoRollNull()
            Me(Me.tableScrapDT.NoRollColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSPLNull() As Boolean
            Return Me.IsNull(Me.tableScrapDT.SPLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSPLNull()
            Me(Me.tableScrapDT.SPLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSTNull() As Boolean
            Return Me.IsNull(Me.tableScrapDT.STColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSTNull()
            Me(Me.tableScrapDT.STColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMPNull() As Boolean
            Return Me.IsNull(Me.tableScrapDT.MPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMPNull()
            Me(Me.tableScrapDT.MPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBTNull() As Boolean
            Return Me.IsNull(Me.tableScrapDT.BTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBTNull()
            Me(Me.tableScrapDT.BTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOCNull() As Boolean
            Return Me.IsNull(Me.tableScrapDT.OCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOCNull()
            Me(Me.tableScrapDT.OCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSGNull() As Boolean
            Return Me.IsNull(Me.tableScrapDT.SGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSGNull()
            Me(Me.tableScrapDT.SGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSCNull() As Boolean
            Return Me.IsNull(Me.tableScrapDT.SCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSCNull()
            Me(Me.tableScrapDT.SCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLRNull() As Boolean
            Return Me.IsNull(Me.tableScrapDT.LRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLRNull()
            Me(Me.tableScrapDT.LRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsKPNull() As Boolean
            Return Me.IsNull(Me.tableScrapDT.KPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetKPNull()
            Me(Me.tableScrapDT.KPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLLNull() As Boolean
            Return Me.IsNull(Me.tableScrapDT.LLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLLNull()
            Me(Me.tableScrapDT.LLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTTLNull() As Boolean
            Return Me.IsNull(Me.tableScrapDT.TTLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTTLNull()
            Me(Me.tableScrapDT.TTLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProdMeterNull() As Boolean
            Return Me.IsNull(Me.tableScrapDT.ProdMeterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProdMeterNull()
            Me(Me.tableScrapDT.ProdMeterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumberLinerNull() As Boolean
            Return Me.IsNull(Me.tableScrapDT.NumberLinerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumberLinerNull()
            Me(Me.tableScrapDT.NumberLinerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableScrapDT.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tableScrapDT.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsScrapDateNull() As Boolean
            Return Me.IsNull(Me.tableScrapDT.ScrapDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetScrapDateNull()
            Me(Me.tableScrapDT.ScrapDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmachineCodeNull() As Boolean
            Return Me.IsNull(Me.tableScrapDT.machineCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmachineCodeNull()
            Me(Me.tableScrapDT.machineCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsshiftNull() As Boolean
            Return Me.IsNull(Me.tableScrapDT.shiftColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetshiftNull()
            Me(Me.tableScrapDT.shiftColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsproductioncodeNull() As Boolean
            Return Me.IsNull(Me.tableScrapDT.productioncodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetproductioncodeNull()
            Me(Me.tableScrapDT.productioncodeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ScheduleDTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ScheduleDTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ScheduleDTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ScheduleDTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ProductionDTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ProductionDTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ProductionDTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ProductionDTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ScrapDTRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ScrapDTRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ScrapDTRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ScrapDTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
